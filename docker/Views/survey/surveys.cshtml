<div id="app" class="wln" v-loading.fullscreen.lock="fullLoading"><router-view></router-view></div>
<style>
    .el-textarea__inner {
        padding: 0px;
    }
    .options{
        clear:both;
    }
    .em-question {
        width: 24px;
        text-align: center;
        display: inline-block;
    }
    .progress {
        float: right;
        width: 180px;
        display: inline-block;
        text-align: left;
    }
        .progress > div {
            width: 128px;
            font-size: 10px;
            display: inline-block;
        }
        .progress > em {
            font-size: 12px;
            display: inline-block;
            vertical-align: middle;
        }
</style>
<template id="app-list">
    <div>
        <div class="wln-title">
            <div style="float:right">
                <el-button size="mini" type="info" :plain="true" onclick="history.back()">返回</el-button>
                <el-button size="mini" type="primary" icon="el-icon-plus" @@click="router.push(_vpath + '/add')" v-if="editer">发布调查</el-button>
            </div>
            调查管理
        </div>
        <el-table :data="rows" :empty-text="message" @@filter-change="filterChange">
            <el-table-column width="270" label="调查名称" property="title"></el-table-column>
            <el-table-column width="270" label="问卷" property="questionary"></el-table-column>
            <el-table-column width="160" align="center" label="调查范围">
                <template scope="scope">
                    <font v-if="scope.row.organ">{{scope.row.organ}}{{scope.row.classes}}</font>
                    <font v-else>全部</font>
                </template>
            </el-table-column>
            <el-table-column width="90" align="center" label="调查进度">
                <template scope="scope">
                    {{scope.row.submit}}/{{scope.row.total}}
                </template>
            </el-table-column>
            <el-table-column></el-table-column>
            <el-table-column width="160" align="right" v-if="editer">
                <template scope="scope">
                    <el-button size="mini" icon="el-icon-view" @@click="handleViewer(scope.row)" type="primary">调查结果</el-button>
                    <el-button size="mini" icon="el-icon-delete" @@click="handleDelete(scope.row)" type="warning">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-pagination @@size-change="sizeChange" @@current-change="currentChange" layout="total, sizes, prev, pager, next, jumper" :current-page="page" :page-size="size" :total="total"></el-pagination>
    </div>
</template>
<template id="app-form">
    <div>
        <div class="wln-title">发布调查</div>
        <el-form ref="form" v-model="form" label-width="80px">
            <el-form-item label="调查名称">
                <el-input v-model="form.title" placeholder="如：2018年春期调查" style="width:320px"></el-input>
            </el-form-item>
            <el-form-item label="调查问卷">
                <el-select v-model="form.questionary" placeholder="请选择" style="width:320px">
                    <el-option v-for="item in questionarys" :label="item.name" :value="item.id"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="调查范围">
                <el-cascader v-model="classesSelect" :options="classes" placeholder="全部学员" change-on-select="true" clearable style="width:320px"></el-cascader>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @@click="onSubmit">提交</el-button>
                <el-button onclick="history.back()">返回</el-button>
            </el-form-item>
        </el-form>
    </div>
</template>
<template id="app-view">
    <div>
        <div class="wln-title">
            <div style="float:right">
                <el-button size="mini" type="info" :plain="true" onclick="history.back()">返回</el-button>
            </div>
            {{title}}<span>{{questionary}}</span>
        </div>
        <div>
            <div style="float:right;font-size:20px;line-height:40px;">
                调查进度：{{submit}}/{{total}}，回收率：{{total == 0 ? '0' : (submit / total * 100.00).toFixed(2)}}%
            </div>
            <el-cascader v-model="classesSelect" :options="classes" placeholder="选择统计范围" :change-on-select="selected.length < 2" :clearable="selected.length == 0" style="width:320px"></el-cascader>
            <el-button type="primary" @@click="filterChange">统计调查结果</el-button>
        </div>
        <div class="wln-line"></div>
        <div>
            <el-collapse v-model="expands">
                <el-collapse-item v-for="item in details" :title="item.title" :name="item.id">
                    <div class="options" v-for="option in item.options">
                        <div class="progress" v-if="item.type < 2"><div><el-progress :percentage="option.percentage" :text-inside="true" :stroke-width="15" status="success"></el-progress></div><em>{{option.count}}人</em></div>
                        <em class="em-question">{{option.flag}}</em>{{option.title}}
                    </div>
                </el-collapse-item>
            </el-collapse>
        </div>
    </div>
</template>
<script type="text/javascript">
    var _vpath = '/surveys';
    var _classes = [];
    var _questionarys = @Html.Raw(ViewBag.Questionarys)
    emptyPager.editer = false;
    emptyPager.fullLoading = false;
    var appList = Vue.extend({
        template: '#app-list',
        data: function () {
            return emptyPager
        },
        methods: {
            refresh() {
                emptyPager.fullLoading = true;
                $.getJSON(location.pathname, { 'do': 'pager', page: emptyPager.page, rows: emptyPager.size, key: emptyPager.key }, function (rlt) {
                    emptyPager.message = rlt.message;
                    emptyPager.total = rlt.total;
                    emptyPager.page = rlt.page;
                    emptyPager.size = rlt.size;
                    emptyPager.rows = rlt.rows;
                    emptyPager.fullLoading = false;
                });
            },
            filterChange(filters) {
                emptyPager.total = 0;
                emptyPager.page = 1;
                emptyPager.rows = [];
                this.refresh();
            },
            sizeChange(val) {
                emptyPager.size = val;
                this.refresh();
            },
            currentChange(val) {
                emptyPager.page = val;
                this.refresh();
            },
            handleViewer(row) {
                router.push(_vpath + '/viewer?id=' + row.id)
            },
            handleDelete(row) {
                this.$confirm('此操作将删除该记录, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    var _self = this;
                    $.getJSON(location.pathname, { 'do': 'del', id: row.id }, function (rlt) {
                        _self.refresh();
                        iTips(rlt.message, rlt.success);
                    });
                }).catch(() => {
                    iTips('删除操作已取消');
                });
            }
        }, created() {
            _self = this;
            _self.refresh();
            $.getJSON('/auth', { code: 'School_Questionary_Editor' }, function (rlt) {
                emptyPager.editer = rlt.success;
            })
        }
    })
    var appForm = Vue.extend({
        template: '#app-form',
        data: function () {
            return {
                form: {
                    id: ''
                    ,
                    title: ''
                    ,
                    organ: ''
                    ,
                    classes: ''
                    ,
                    questionary: ''
                }
                ,
                classes: _classes
                ,
                questionarys: _questionarys
                ,
                classesSelect: []
            };
        },
        methods: {
            onSubmit: function () {
                var obj = this.form;
                if (this.classesSelect.length == 2) {
                    obj.organ = this.classesSelect[0]
                    obj.classes = this.classesSelect[1]
                } else if (this.classesSelect.length == 1) {
                    obj.organ = this.classesSelect[0]
                    obj.classes = ''
                } else {
                    obj.organ = ''
                    obj.classes = ''
                }
                $.post(location.pathname + '?do=set', obj, function (rlt) {
                    app.$message({ type: rlt.success ? 'success' : 'error', message: rlt.message });
                    if (rlt.success) {
                        history.back();
                    }
                });
            }
        }, created() {
            let t = this
            if (_classes.length == 0) {
                $.getJSON('/ajax/classes', {}, function (rlt) {
                    _classes = rlt.classes;
                    t.classes = _classes
                })
            } else {
                t.classes = _classes
            }
        }
    })
    var appView = Vue.extend({
        template: '#app-view',
        data: function () {
            return {
                id: '',
                title: '调查结果',
                total: 0,
                submit: 0,
                details: [],
                questionary: '',
                expands: [],
                classes: [],
                selected: [],
                classesSelect: [],
                message: ''
            }
        },
        methods: {
            refresh() {
                let t = this
                t.details = [];
                console.log(t.classesSelect)
                emptyPager.fullLoading = true;
                $.getJSON(location.pathname, { 'do': 'details', id: t.id, organ: t.classesSelect.length > 0 ? t.classesSelect[0] : '', classes: t.classesSelect.length > 1 ? t.classesSelect[1] : '' }, function (rlt) {
                    if (rlt.message) {
                        t.message = rlt.message;
                    } else {
                        t.total = rlt.total;
                        t.submit = rlt.submit;
                        t.details = rlt.details;
                        t.expands = [];
                        for (var i = 0; i < rlt.details.length; i++) {
                            t.expands.push(rlt.details[i].id)
                        }
                    }
                    emptyPager.fullLoading = false;
                });
            },
            filterChange(filters) {
                this.refresh();
            },
            handleViewer(row) {
                router.push(_vpath + '/viewer?id=' + row.id)
            },
            handleDelete(row) {
                this.$confirm('此操作将删除该记录, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    var _self = this;
                    $.getJSON(location.pathname, { 'do': 'del', id: row.id }, function (rlt) {
                        _self.refresh();
                        iTips(rlt.message, rlt.success);
                    });
                }).catch(() => {
                    iTips('删除操作已取消');
                });
            }
        }, created() {
            let t = this
            emptyPager.fullLoading = true;
            t.id = Vue.prototype.getParam('id')
            $.getJSON(location.pathname, { 'do': 'classes', id: t.id }, function (rlt) {
                if (rlt.success) {
                    t.classes = rlt.classes
                    t.selected = rlt.selected
                    t.classesSelect = rlt.selected
                    t.questionary = rlt.questionary
                    t.title = rlt.title
                    t.refresh();
                } else {
                    emptyPager.fullLoading = false;
                    iTips(rlt.message, rlt.success);
                }
            })
        }
    })
    var router = new VueRouter({
        mode: 'history', routes: [
            { path: _vpath, component: appList }
            , { path: _vpath + '/add', component: appForm }
            , { path: _vpath + '/viewer', component: appView }
        ]
    });
    var app = new Vue({ el: '#app', router: router, data: emptyPager  });
</script>