<style>
    .el-form-item {margin-bottom:0;}
</style>
<div id="app" style="width:99%;height:99%;margin:0.5%">
    <el-form ref="form" label-width="0px" style="width:100%;background-color:#f0f0f0;">
        <el-form-item>
            <el-col :span="2" class="label">缴费学员&nbsp;</el-col>
            <el-col :span="22"><font style="font-size:1.5em;color:#F44336;">@Html.Raw(ViewBag.StudentName)</font></el-col>
        </el-form-item>
        <el-form-item>
            <el-col :span="2" class="label">@Html.Raw(ViewBag.Label_StudentId)&nbsp;</el-col>
            <el-col :span="22">@Html.Raw(ViewBag.StudentId)</el-col>
        </el-form-item>
    </el-form>
    <el-table v-loading="listLoading" :data="rows" show-summary :summary-method="getSummaries" :empty-text="message">
        <el-table-column width="40" align="center" type="index"></el-table-column>
        <el-table-column width="200" align="left" label="收费项目" property="feescalename"></el-table-column>
        <el-table-column width="100" align="center" label="单价" property="price"></el-table-column>
        @if (ViewBag.IsPay)
        {
        <el-table-column width="250" align="center" label="缴费期间" property="date"></el-table-column>
        <el-table-column width="100" align="center" label="数量" property="count"></el-table-column>
        } else {
        <el-table-column width="250" align="center" label="缴费期间">
            <template scope="scope">
                <el-date-picker v-model="scope.row.picker" @@change="pickerChange(scope.row)" :editable="false" type="daterange" format="yyyy-MM-dd" range-separator=" - " style="width:210px"></el-date-picker>
            </template>
        </el-table-column>
        <el-table-column width="100" align="center" label="数量">
            <template scope="scope">
                <input type="text" v-model="scope.row.count" @@change="countChange(scope.row)" style="width:96%;text-align:center;line-height:38px;border-radius:5px;" />
            </template>
        </el-table-column>
        }
        <el-table-column width="120" align="right" label="优惠" property="discount"></el-table-column>
        <el-table-column width="120" align="right" label="小计" property="amount"></el-table-column>
        <el-table-column align="left" property="remark"></el-table-column>
        @if (!ViewBag.IsPay){
        <el-table-column width="100" align="center" label="操作">
            <template scope="scope">
                <el-button size="small" type="primary" @@click="handleRemove(scope.row)">移除</el-button>
            </template>
        </el-table-column>
        }
    </el-table>
    <div style="text-align:center;padding:6px;margin-top:15px;">
        @if (ViewBag.IsPay)
        {
            <el-button type="success" onclick="locltion.href='/ticket/print?id=@Html.Raw(ViewBag.OrderId)" style="vertical-align:top;">打印缴费单据</el-button>
        }
        else
        {
            <el-select v-model="feescale" placeholder="请选择收费项目进行添加" @@change="feescaleChange" style="width:300px;">
                <el-option v-for="item in feescales" :label="item.name" :value="item" :key="item.id">
                    <span style="display:inline-block;width:90px;">{{item.name}}</span>
                    <span style="color:#8492a6;font-size:12px">单价：{{item.price}}</span>
                </el-option>
            </el-select>
            <el-button type="success" @@click="topay()" style="vertical-align:top;">前往缴费</el-button>
        }
        <el-button onclick="history.back()" style="vertical-align:top;">返回</el-button>
    </div>
</div>
<script type="text/javascript">
    emptyPager.orderid = '@Html.Raw(ViewBag.OrderId)';
    emptyPager.rows = [];
    emptyPager.feescale = {};
    emptyPager.feescales = [];
    emptyPager.Loaded = false;
    emptyPager.listLoading = false;
    emptyPager.first = true;
    var app = new Vue({
        el: '#app', data: emptyPager, methods: {
            refresh() {
                emptyPager.listLoading = true;
                $.getJSON(location.pathname, { 'do': 'list', 'id': emptyPager.orderid, 'first': emptyPager.first ? "true" : "false" }, function (rlt) {
                    emptyPager.first = false;
                    emptyPager.listLoading = false;
                    emptyPager.rows = rlt;
                    emptyPager.message = rlt.length == 0 ? '暂无缴费明细' : '加载完成';
                })
            },
            topay() {
                if (emptyPager.Loaded) {
                    iTips('操作正在提交中，请稍后');
                } else {
                    emptyPager.Loaded = true;
                    $.getJSON('/topay', { 'from': 'feeorder', 'fromid': emptyPager.orderid }, function (rlt) {
                        emptyPager.Loaded = false;
                        if (rlt.success) {
                            if (rlt.ispay) {
                                location.href = '/ticket?id=' + rlt.payid;
                            } else {
                                location.href = '/pay?id=' + rlt.payid;
                            }
                        } else {
                            iTips(rlt.message, rlt.success);
                        }
                    })
                }
            },
            pickerChange(row) {
                if (row.picker.length == 2) {
                    emptyPager.listLoading = true;
                    $.getJSON(location.pathname, { 'do': 'picker', 'id': emptyPager.orderid, rowid: row.id, begintime: row.picker[0].pattern("yyyy-MM-dd"), endtime: row.picker[1].pattern("yyyy-MM-dd") }, function (rlt) {
                        emptyPager.listLoading = false;
                        iTips(rlt.message, rlt.success);
                        if (rlt.success) {
                            app.refresh();
                            localStorage.setItem('reload', 'true');
                        }
                    })
                }
            },
            countChange(row) {
                if (isNaN(Number(row.count))) {
                    iTips('您输入的数量格式有误');
                } else {
                    emptyPager.listLoading = true;
                    $.getJSON(location.pathname, { 'do': 'count', 'id': emptyPager.orderid, rowid: row.id, count: row.count }, function (rlt) {
                        emptyPager.listLoading = false;
                        iTips(rlt.message, rlt.success);
                        if (rlt.success) {
                            app.refresh();
                            localStorage.setItem('reload', 'true');
                        }
                    })
                }
            },
            handleRemove(row) {
                emptyPager.listLoading = true;
                $.getJSON(location.pathname, { 'do': 'remove', 'id': emptyPager.orderid, rowid: row.id }, function (rlt) {
                    emptyPager.listLoading = false;
                    iTips(rlt.message, rlt.success);
                    if (rlt.success) {
                        app.refresh();
                        localStorage.setItem('reload', 'true');
                    }
                })
            },
            getSummaries(param) {
                const { columns, data } = param;
                const sums = [];
                columns.forEach((column, index) => {
                    if (index !== 1 && index !== 5 && index !== 6) {
                        sums[index] = '';
                    } else if (index === 5) {
                        const values = data.map(item => Number(item[column.property]));
                        if (!values.every(value => isNaN(value))) {
                            sums[index] = values.reduce((prev, curr) => {
                                const value = Number(curr);
                                if (!isNaN(value)) {
                                    return prev + curr;
                                } else {
                                    return prev;
                                }
                            }, 0);
                            sums[index] = '￥ ' + sums[index].toFixed(2);
                        }
                    } else if (index === 6) {
                        const values = data.map(item => Number(item[column.property]));
                        if (!values.every(value => isNaN(value))) {
                            sums[index] = values.reduce((prev, curr) => {
                                const value = Number(curr);
                                if (!isNaN(value)) {
                                    return prev + curr;
                                } else {
                                    return prev;
                                }
                            }, 0);
                            sums[index] = '￥ ' + sums[index].toFixed(2);
                        }
                    } else {
                        sums[index] = '总价';
                    }
                });

                return sums;
            },
            feescaleChange(val) {
                if (val && val.id) {
                    emptyPager.listLoading = true;
                    $.getJSON(location.pathname, { 'do': 'append', 'id': emptyPager.orderid, feescale: val.id, begintime:'@Html.Raw(ViewBag.BeginTime)', endtime:'@Html.Raw(ViewBag.EndTime)' }, function (rlt) {
                        emptyPager.listLoading = false;
                        iTips(rlt.message, rlt.success);
                        if (rlt.success) {
                            app.refresh();
                            localStorage.setItem('reload', 'true');
                        }
                    })
                    emptyPager.feescale = '';
                }
            }
        },
        created() {
            this.refresh(); @if (!ViewBag.IsPay){<text>
            $.getJSON('/feescale', { 'do': 'tree', 'organ': '@ViewBag.Organ' }, function (rlt) {
                emptyPager.feescales = rlt;
            })</text>}

        }
    })
</script>